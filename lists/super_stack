
class SuperStack:
    def __init__(self):
        self.data = []
        self.top_index = -1

    def push(self, val):
        self.data.append(val)
        self.top_index += 1

    def pop(self):
        if self.top_index == -1:
            return None

        val = self.data.pop(self.top_index)
        self.top_index -= 1
        return val

    def peek(self):
        if self.top_index == -1:
            return "Empty"
        return self.data[self.top_index], self.data


    def inc(self, num_elems, inc_val):
        for i in range(0, num_elems):
            if i > self.top_index:
                break
            self.data[i] += inc_val

def super_stack(operations):
    s = SuperStack()

    for op in operations.split("\n"):
        if op[:len("push")] == "push":
            val = int(op[(len("push")):])
            s.push(val)
            print("push", val, "\t\t", s.peek())
        elif op[:len("pop")] == "pop":
            s.pop()
            print("pop", "\t\t", s.peek())
        elif op[:len("inc")] == "inc":
            x = op[(len("inc")):].split(" ")
            e = int(x[1])
            k = int(x[2])
            s.inc(e, k)
            print("inc", e, k, "\t", s.peek())


    return


operations = \
"""12
push 4
pop
push 3
push 5
push 2
inc 3 1
pop
push 1
inc 2 2
push 4
pop
pop
"""

super_stack(operations)
